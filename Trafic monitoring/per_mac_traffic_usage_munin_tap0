#!/bin/sh
#
# Traffic logging tool for munin
#
# Munin plugin config:
# [per_mac_traffic_usage_munin_*]
# # needs root for iptables-save
# user root
# # etc. same as before
#
# Munin-ified by JP Meijers on 2014-01-20
# Created by Emmanuel Brucy (e.brucy AT qut.edu.au)
# Based on work from Fredrik Erlandsson (erlis AT linux.nu)
# Based on traff_graph script by twist - http://wiki.openwrt.org/RrdTrafficWatch
# 
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


LAN_IFACE=`basename $0` #use current filename to determine the interface name
LAN_IFACE=${LAN_IFACE##*_} #strip all up to and including last underscore


STORAGE_LOCATION="/root/trafficmon"
USAGE_DB_LOCATION="${STORAGE_LOCATION}/usage.db"
USERSFILE="${STORAGE_LOCATION}/known_macs.db"
LASTUPDATE="${STORAGE_LOCATION}/lastupdate"

[ ! -f $USAGE_DB_LOCATION ] && { touch $USAGE_DB_LOCATION ; }
[ ! -f $USERSFILE ] && { touch $USERSFILE ; }
[ ! -f $LASTUPDATE ] && { echo `date "+%d +%m +%Y"` > $LASTUPDATE ; }

## create logic to delete the database if the last update was a previous month (a day for test)
## keep list of macs, but reset counters

while read DAY MONTH YEAR
do
  CURRENT_MONTH=`date "+%m"`
  if [ $MONTH -ne $CURRENT_MONTH ]; then
    while read MAC a b c d e
    do
      echo ${MAC},0,0,0,0,$(date "+%d-%m-%Y %H:%M") >> /tmp/tempusagedb
    done < $USAGE_DB_LOCATION
    mv /tmp/tempusagedb $USAGE_DB_LOCATION
  fi
done < $LASTUPDATE

echo `date "+%d %m %Y"` > $LASTUPDATE

lock()
{
	while [ -f /tmp/wrtbwmon.lock ]; do
		if [ ! -d /proc/$(cat /tmp/wrtbwmon.lock) ]; then
			#echo "WARNING : Lockfile detected but process $(cat /tmp/wrtbwmon.lock) does not exist !"
			rm -f /tmp/wrtbwmon.lock
		fi
		sleep 1
	done
	echo $$ > /tmp/wrtbwmon.lock
}

unlock()
{
	rm -f /tmp/wrtbwmon.lock
}

case $1 in
   config)
        #root graph usage
        echo "multigraph ${LAN_IFACE}_usage"
        echo "graph_title Data usage on ${LAN_IFACE}"
        echo "graph_vlabel bytes"
        echo "graph_order recv send"
        echo "graph_args --base 1000"
        echo "graph_vlabel bits in (-) / out (+)"
        echo "graph_category network"
        echo "graph_info This graph shows the usage for ${LAN_IFACE}"
        
        echo "send.info Bits sent/received on ${LAN_IFACE}"
        echo "recv.label recv"
        echo "recv.type GAUGE"
        echo "recv.graph no"
        echo "recv.cdef recv,8,*"
        echo "recv.min 0"
        echo "send.label bps"
        echo "send.type GAUGE"
        echo "send.negative recv"
        echo "send.cdef send,8,*"
        echo "send.min 0"
        
        #sub graph usage
        #for each mac we monitor
        OLDIFS=$IFS
        IFS=,
        while read MAC a b c d e
        do
          MAC=`echo $MAC | tr -d ':'` #strip colons from mac
          echo "multigraph ${LAN_IFACE}_usage.$MAC"
          
          #graph real name stays constant, but change the labels if we know more
          USER=$(grep "${MAC}" "${USERSFILE}" | cut -f2 -s -d, )
                	[ -z "$USER" ] && USER=${MAC}
          echo "graph_title Data usage of $USER"
          echo "graph_vlabel bytes"
          echo "graph_order recv send"
          echo "graph_args --base 1000"
          echo "graph_vlabel bits in (-) / out (+)"
          echo "graph_category network"
          echo "graph_info This graph shows the usage of $USER"
          
          echo "send.info Bits sent/received by $USER"
          echo "recv.label recv"
          echo "recv.type GAUGE"
          echo "recv.graph no"
          echo "recv.cdef recv,8,*"
          echo "recv.min 0"
          echo "send.label bps"
          echo "send.type GAUGE"
          echo "send.negative recv"
          echo "send.cdef send,8,*"
          echo "send.min 0"
        done < $USAGE_DB_LOCATION
        IFS=$OLDIFS	

        
        #root graph traffic
        echo "multigraph ${LAN_IFACE}_traffic"
        echo "graph_title Traffic on ${LAN_IFACE}"
        echo "graph_vlabel bytes"
        echo "graph_order recv send"
        echo "graph_args --base 1000"
        echo "graph_vlabel bits in (-) / out (+) per \${graph_period}"
        echo "graph_category network"
        echo "graph_info This graph shows the traffic for ${LAN_IFACE}"
        
        echo "send.info Bits sent/received on ${LAN_IFACE}"
        echo "recv.label recv"
        echo "recv.type DERIVE"
        echo "recv.graph no"
        echo "recv.cdef recv,8,*"
        echo "recv.min 0"
        echo "send.label bps"
        echo "send.type DERIVE"
        echo "send.negative recv"
        echo "send.cdef send,8,*"
        echo "send.min 0"
        
        
        #sub graph traffic
        #for each mac we monitor
        OLDIFS=$IFS
        IFS=,
        [ ! -f $USAGE_DB_LOCATION ] && { touch $USAGE_DB_LOCATION ; }
        while read MAC a b c d e
        do
          MAC=`echo $MAC | tr -d ':'` #strip colons from mac
          echo "multigraph ${LAN_IFACE}_traffic.$MAC"
          
          #graph real name stays constant, but change the labels if we know more
          USER=$(grep "${MAC}" "${USERSFILE}" | cut -f2 -s -d, )
                	[ -z "$USER" ] && USER=${MAC}
          echo "graph_title Traffic for $USER"
          echo "graph_vlabel bytes"
          echo "graph_order recv send"
          echo "graph_args --base 1000"
          echo "graph_vlabel bits in (-) / out (+)"
          echo "graph_category network"
          echo "graph_info This graph shows the traffic for $USER"
          
          echo "send.info Bits sent/received by $USER"
          echo "recv.label recv"
          echo "recv.type DERIVE"
          echo "recv.graph no"
          echo "recv.cdef recv,8,*"
          echo "recv.min 0"
          echo "send.label bps"
          echo "send.type DERIVE"
          echo "send.negative recv"
          echo "send.cdef send,8,*"
          echo "send.min 0"
        done < $USAGE_DB_LOCATION
        IFS=$OLDIFS
        
        
        exit 0;;
esac


################################################################################
# do the periodic firewall rule check
################################################################################

  #echo "Creating firewall rules" >&2

	#Create the MUNINLOG CHAIN (it doesn't matter if it already exists).
	iptables -N MUNINLOG 2> /dev/null

	#Add the MUNINLOG CHAIN to the FORWARD chain (if non existing).
	iptables -L FORWARD --line-numbers -n | grep "MUNINLOG" | grep "1" > /dev/null
	if [ $? -ne 0 ]; then
		iptables -L FORWARD -n | grep "MUNINLOG" > /dev/null
		if [ $? -eq 0 ]; then
			#echo "DEBUG : iptables chain misplaced, recreating it..."
			iptables -D FORWARD -j MUNINLOG
		fi
		  iptables -I FORWARD -j MUNINLOG
	fi

	#For each host in the ARP table
	grep ${LAN_IFACE} /proc/net/arp | while read IP TYPE FLAGS MAC MASK IFACE ;
	do
		#Add iptable rules (if non existing).
		#echo "Adding rule for $IP at $MAC on $IFACE" >&2
		
		iptables -nL MUNINLOG | grep "${IP} " > /dev/null
		if [ $? -ne 0 ]; then
			iptables -I MUNINLOG -d ${IP} -j RETURN
			iptables -I MUNINLOG -s ${IP} -j RETURN
		fi
	done	


################################################################################
# Do the actual dumping of counters
################################################################################

	lock # lock the usage database
	
	#Read and reset counters
	iptables -L MUNINLOG -vnxZ -t filter > /tmp/traffic_$$.tmp
	
	#cat /tmp/traffic_$$.tmp >&2
	
	echo 0 > /tmp/tot_in_$$.tmp
	echo 0 > /tmp/tot_out_$$.tmp
	
	grep -v "0x0" /proc/net/arp | grep -v 'IP address' | while read IP TYPE FLAGS MAC MASK IFACE
	do
	  #echo "${IP} is ${MAC} on ${IFACE}" >&2
		#Add new data to the graph. Count in Kbs to deal with 16 bits signed values (up to 2G only)
		#Have to use temporary files because of crappy busybox shell
		grep ${IP} /tmp/traffic_$$.tmp | while read PKTS BYTES TARGET PROT OPT IFIN IFOUT SRC DST
		do
			[ "${DST}" = "${IP}" ] && echo ${BYTES:-0} > /tmp/in_$$.tmp
			[ "${SRC}" = "${IP}" ] && echo ${BYTES:-0} > /tmp/out_$$.tmp
		done
		IN=$(cat /tmp/in_$$.tmp 2> /dev/null || echo "0")
		OUT=$(cat /tmp/out_$$.tmp 2> /dev/null || echo "0")
		rm -f /tmp/in_$$.tmp
		rm -f /tmp/out_$$.tmp

		if [ ${IN:-0} -gt 0 -o ${OUT:-0} -gt 0 ];  then
			#echo "DEBUG : New traffic for ${MAC} since last update : ${IN}bytes:${OUT}bytes"
		
			LINE=$(grep ${MAC} ${USAGE_DB_LOCATION})
			if [ -z "${LINE}" ]; then
				echo "DEBUG : ${MAC} is a new host !"
				USAGE_IN=0
				USAGE_OUT=0
			else
				USAGE_IN=$(echo ${LINE} | cut -f2 -s -d, )
				USAGE_OUT=$(echo ${LINE} | cut -f3 -s -d, )
			fi
			
			USAGE_IN=$((${USAGE_IN}+${IN}))
			USAGE_OUT=$((${USAGE_OUT}+${OUT}))
			
			TOT_IN=$(cat /tmp/tot_in_$$.tmp || echo "0")
			TOT_OUT=$(cat /tmp/tot_out_$$.tmp || echo "0")
			TOT_IN=$((${IN}+${TOT_IN}))                                                
			TOT_OUT=$((${OUT}+${TOT_OUT})) 
			echo ${TOT_IN} > /tmp/tot_in_$$.tmp
			echo ${TOT_OUT} > /tmp/tot_out_$$.tmp
			
			grep -v "${MAC}" ${USAGE_DB_LOCATION} > /tmp/db_$$.tmp
			mv /tmp/db_$$.tmp ${USAGE_DB_LOCATION}
			echo ${MAC},${USAGE_IN},${USAGE_OUT},${IN},${OUT},$(date "+%d-%m-%Y %H:%M") >> ${USAGE_DB_LOCATION}

      MAC=`echo $MAC | tr -d ':'`
       			#wget --quiet --output-document=- --post-data "user=${MAC}&download=${IN}&upload=${OUT}" http://${CONSUMER_IP}/${CONSUMER_PATH}/traffic/log.php
		fi
	done
	TOT_IN=$(cat /tmp/tot_in_$$.tmp || echo "0")
	TOT_OUT=$(cat /tmp/tot_out_$$.tmp || echo "0")
		
	#wget --quiet --output-document=- --post-data "user=traffic&download=${TOT_IN}&upload=${TOT_OUT}" http://${CONSUMER_IP}/${CONSUMER_PATH}/traffic/log.php
	
	#echo 0 > /tmp/tot_usage_in_$$.tmp
	#echo 0 > /tmp/tot_usage_out_$$.tmp
	
	cat ${USAGE_DB_LOCATION} | while IFS=, read MAC USAGE_IN USAGE_OUT IN OUT LASTSEEN	
	do
		TOT_USAGE_IN=$(cat /tmp/tot_usage_in_$$.tmp 2> /dev/null || echo "0")
		TOT_USAGE_OUT=$(cat /tmp/tot_usage_out_$$.tmp 2> /dev/null || echo "0")
		TOT_USAGE_IN=$((${USAGE_IN:-0}+${TOT_USAGE_IN:-0}))
		TOT_USAGE_OUT=$((${USAGE_OUT:-0}+${TOT_USAGE_OUT:-0}))
		echo ${TOT_USAGE_IN} > /tmp/tot_usage_in_$$.tmp 
		echo ${TOT_USAGE_OUT} > /tmp/tot_usage_out_$$.tmp		
		MAC=`echo $MAC | tr -d ':'`
		#wget --quiet --output-document=- --post-data "user=${MAC}&download=${USAGE_IN}&upload=${USAGE_OUT}" http://${CONSUMER_IP}/${CONSUMER_PATH}/usage/log.php		
		echo "multigraph ${LAN_IFACE}_usage.$MAC"
		echo "recv.value ${USAGE_IN:-0}"
		echo "send.value ${USAGE_OUT:-0}"
		echo "multigraph ${LAN_IFACE}_traffic.$MAC"
		echo "recv.value ${USAGE_IN:-0}"
		echo "send.value ${USAGE_OUT:-0}"
	done
	TOT_USAGE_IN=$(cat /tmp/tot_usage_in_$$.tmp || echo "0")
	TOT_USAGE_OUT=$(cat /tmp/tot_usage_out_$$.tmp || echo "0")
	#wget --quiet --output-document=- --post-data "user=usage&download=${TOT_USAGE_IN}&upload=${TOT_USAGE_OUT}" http://${CONSUMER_IP}/${CONSUMER_PATH}/usage/log.php
	echo "multigraph ${LAN_IFACE}_usage"
	echo "recv.value ${TOT_USAGE_IN:-0}"
	echo "send.value ${TOT_USAGE_OUT:-0}"
	echo "multigraph ${LAN_IFACE}_traffic"
	echo "recv.value ${TOT_USAGE_IN:-0}"
	echo "send.value ${TOT_USAGE_OUT:-0}"

	#UPTIME
	#UPTIME=`cat /proc/uptime | sed 's/\..*//'`
	#wget --quiet --output-document=- --post-data "uptime=${UPTIME}" http://${CONSUMER_IP}/${CONSUMER_PATH}/uptime/log.php
	
	#Free some memory
	rm -f /tmp/*_$$.tmp
	unlock
